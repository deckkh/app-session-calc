/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package app.session.calc;

import java.io.IOException;
import java.util.Properties;


import app.session.calc.serialization.*;

import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.common.serialization.Serdes.VoidSerde;
import org.apache.kafka.streams.KafkaStreams;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.StreamsConfig;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.GlobalKTable;
import org.apache.kafka.streams.kstream.KStream;
import org.apache.kafka.streams.kstream.KeyValueMapper;
import org.apache.kafka.streams.kstream.Produced;
import org.apache.kafka.streams.kstream.ValueJoiner;
import org.apache.kafka.streams.state.KeyValueStore;
import org.apache.kafka.clients.consumer.ConsumerConfig;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args) {

          // the builder is used to construct the topology
          StreamsBuilder builder = new StreamsBuilder();

          ApplogSerdes applogSerdes = new ApplogSerdes();
          VoidSerde voidSerde = new VoidSerde();


                    // set the required properties for running Kafka Streams
                    Properties config = new Properties();
                    config.put(StreamsConfig.APPLICATION_ID_CONFIG, "app-session-calc");
                    config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG, "172.26.148.42:29092");
                    config.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
                    config.put(StreamsConfig.DEFAULT_KEY_SERDE_CLASS_CONFIG, Serdes.Void().getClass());
                    config.put(StreamsConfig.DEFAULT_VALUE_SERDE_CLASS_CONFIG, Serdes.String().getClass());


                        // read from the source topic, "users"
                       KStream<Void, Applog> applog = builder.stream("applog",Consumed.with(voidSerde, applogSerdes));

                       applog.foreach(
                        (key, value) -> {
                          System.out.println("(Login) Hello, " + value.getEventid());
                        });

                       KStream<Void, Applog> onlyEvents = applog.filterNot((key, value) -> !(value.getEventid() == 1 || value.getEventid() == 2));

                       onlyEvents.foreach(
                        (key, value) -> {
                          System.out.println("(Filter) Hello, " + value.getEventid());
                        });
 
          
                    // build the topology and start streaming
                    KafkaStreams streams = new KafkaStreams(builder.build(), config);
                    streams.start();
          
                    // close Kafka Streams when the JVM shuts down (e.g. SIGTERM)
                    Runtime.getRuntime().addShutdownHook(new Thread(streams::close));
    }
}
